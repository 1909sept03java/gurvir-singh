--CREATE A Table for Bank_User and for Account. 
CREATE TABLE Bank_User (
    USER_ID INTEGER PRIMARY KEY, 
    USER_FIRSTNAME VARCHAR2(20),
    USER_LASTNAME VARCHAR2(20),
    USER_USERNAME VARCHAR(20),
    USER_PASSWORD VARCHAR(20), 
    USER_EMAIL VARCHAR2(50),
    RANK_USER INTEGER 
);
/
--I could have used boolean for rank since there is only two. A superuser and regular user, but I just decided to use integer. 
CREATE TABLE ACCOUNT (
    ACCOUNT_ID INTEGER PRIMARY KEY,
    BALANCE NUMBER,
    USER_ID INTEGER,
    ACCOUNT_NUM INTEGER
);
/

ALTER TABLE ACCOUNT
ADD CONSTRAINT UNI_ACCOUNT_NUM UNIQUE(ACCOUNT_NUM);

ALTER TABLE Bank_User
ADD CONSTRAINT UNI_USERNAME UNIQUE(USER_USERNAME);

--Foreign Key Constraint

ALTER TABLE ACCOUNT
ADD CONSTRAINT FK_ACCOUNT_USER
FOREIGN KEY (USER_ID) REFERENCES BANK_USER(USER_ID);
/
--CREATE THE SEQUENCES FOR PRIMARY KEYS.
CREATE SEQUENCE SQ_USER_PK
START WITH 1
INCREMENT BY 1;
/
CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 1
INCREMENT BY 1;
/
CREATE SEQUENCE SQ_ACCOUNT_NUM_PK
START WITH 9000
INCREMENT BY 1;
/
--Now create trigger to make use of these sequences. 

CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON BANK_USER 
FOR EACH ROW
BEGIN
    SELECT SQ_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNT  
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT_NUM
BEFORE INSERT ON ACCOUNT  
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_NUM_PK.NEXTVAL INTO :NEW.ACCOUNT_NUM FROM DUAL;
END;
/
--Just to populate the database. When user is registering, I will not be giving them access to pick their rank. 

INSERT ALL
INTO BANK_USER (USER_FIRSTNAME, USER_LASTNAME,USER_USERNAME, USER_PASSWORD, USER_EMAIL, RANK_USER)
VALUES ('Gurvir', 'Singh', 'gsingh34', 'coolpassword123', 'gurvir@gmail.com', 1) --Only superuser indicated by having rank 1.
INTO BANK_USER (USER_FIRSTNAME, USER_LASTNAME,USER_USERNAME, USER_PASSWORD, USER_EMAIL, RANK_USER)
VALUES ('Rebecca', 'Singh', 'rsingh18', 'mypass123', 'rebecca@gmail.com', 2)
INTO BANK_USER (USER_FIRSTNAME, USER_LASTNAME,USER_USERNAME, USER_PASSWORD, USER_EMAIL, RANK_USER)
VALUES ('Shahzeb', 'Leghari', 'shah13', 'mypass456', 'shahzeb@gmail.com', 2)
INTO BANK_USER (USER_FIRSTNAME, USER_LASTNAME,USER_USERNAME, USER_PASSWORD, USER_EMAIL, RANK_USER)
VALUES ('Shahrukh', 'Leghari', 'shah16', 'mypass789', 'shahrukh@gmail.com', 2)
INTO BANK_USER (USER_FIRSTNAME, USER_LASTNAME,USER_USERNAME, USER_PASSWORD, USER_EMAIL, RANK_USER)
VALUES ('Naomi', 'Dalchand', 'naomi15', 'pass123', 'naomi@gmail.com', 2)
INTO BANK_USER (USER_FIRSTNAME, USER_LASTNAME,USER_USERNAME, USER_PASSWORD, USER_EMAIL, RANK_USER)
VALUES ('Pavi', 'Sandhu', 'pavi34', 'pass456', 'pavi@gmail.com', 2)
SELECT * FROM DUAL;

INSERT ALL
INTO ACCOUNT (BALANCE, USER_ID)
VALUES(500.00, 1)
INTO ACCOUNT (BALANCE, USER_ID)
VALUES(1000.00, 2)
INTO ACCOUNT (BALANCE, USER_ID)
VALUES(2500.00, 2)
INTO ACCOUNT (BALANCE, USER_ID)
VALUES(13.00, 3)
INTO ACCOUNT (BALANCE, USER_ID)
VALUES(398.00, 4)
INTO ACCOUNT (BALANCE, USER_ID)
VALUES(700.00, 5)
INTO ACCOUNT (BALANCE, USER_ID)
VALUES(8600.00, 6)
SELECT * FROM DUAL;

--Stored Procedure for Withdraing and Deposit. On Java side I'll determine if its
--withdrawl or deposit. 
CREATE OR REPLACE PROCEDURE CHANGE_BALANCE(A_NUM IN NUMBER, T_NUM IN NUMBER, NEW_BAL OUT NUMBER)
IS
CUR_BAL INTEGER;
BEGIN
  SELECT BALANCE INTO CUR_BAL FROM ACCOUNT WHERE ACCOUNT_NUM = A_NUM;
  NEW_BAL := CUR_BAL + T_NUM;
  UPDATE ACCOUNT 
  SET BALANCE = NEW_BAL
  WHERE ACCOUNT_NUM = A_NUM;
  COMMIT;
END; 
/

DELETE BANK_USER WHERE USER_ID = 22;

SELECT * FROM BANK_USER WHERE USER_USERNAME = 'Ling';
